!!!
%html
  %head
    %meta{name: "viewport", content: "width=device-width, initial-scale=1"}
    %script{src: 'https://ajax.googleapis.com/ajax/libs/angularjs/1.2.21/angular.min.js' }
    %script{src: 'http://code.jquery.com/jquery-2.1.0.min.js' }
    %script{src: 'http://underscorejs.org/underscore-min.js' }
    %link{href: "http://getbootstrap.com/dist/css/bootstrap.min.css", rel: "stylesheet"}
    :javascript
      function ExampleController($scope) {
        $scope.valid_functions = #{locals[:valid_functions].to_json};
        $scope.raw_data_columns = #{locals[:raw_data_columns].to_json};
        $scope.target_columns = #{locals[:target_columns].to_json};

        $scope.nonRecurrsiveInitArgs = function(arr, func) {
          func.name = arr[0];
          _.each(_.rest(arr, 1), function(arg, i) {
            if(typeof arg === 'object') {
              func.args[i].keys = _.keys(arg);
              func.args[i].values = _.values(arg);
            } else if(arg[0] === 'list') {
              func.args[i].values = arg;
            } else {
              func.args[i].value = arg;
            }
          });
          return func;
        };

        $scope.json_from_hash = function(func) {
          if(func && func.args) {
            var arg_values = _.map(func.args, function(arg) {
              if(arg.name.split('_')[0] == 'hash') {
                return _.object(_.compact(arg.keys), arg.values);
              } else if(arg.name.split('_')[0] == 'list') {
                return ['list'].concat(_.compact(arg.values));
              } else {
                return arg.value;
              }
            })
            var json = [func.name].concat(arg_values);
            return JSON.stringify(json);
          }
        };

        $scope.remove_blanks = function(values) {
          return _.compact(values).concat(['']);
        };

        $scope.remove_blanks_from_hash = function(arg) {
          var new_values = [];
          _.each(arg.keys, function(key, index) {
            if(_.identity(key)) {
              new_values.push(arg.values[index] || "");
            }
          });
          arg.keys = _.compact(arg.keys).concat(['']);
          arg.values = new_values;
        };

        _.each($scope.target_columns, function(target_column) {
          target_column.valid_functions = angular.copy($scope.valid_functions);
          if(target_column.persisted_func) {
            target_column.selected_func = $scope.nonRecurrsiveInitArgs(target_column.persisted_func,
              _.findWhere(target_column.valid_functions, {name: target_column.persisted_func[0]})
            );
          }
        });
      };
  %body{'ng-app' => true}
    %div{'ng-controller' => 'ExampleController'}
      %script{type: 'text/ng-template', id: "lookup.html"}
        %select.form-control{ 'ng-options' => "raw_column as raw_column for raw_column in raw_data_columns",
                              'ng-model' => 'arg.value'}

      %script{type: 'text/ng-template', id: "str.html"}
        %input.form-control{ 'ng-model' => 'arg.value' }

      %script{type: 'text/ng-template', id: "hash.html"}
        %div{"ng-init" => 'arg.keys = arg.keys || [""]'}
        %div{"ng-init" => 'arg.values = arg.values || [""]'}
        .form-inline.text-center{'ng-repeat' => 'key in arg.keys track by $index'}
          %input.form-control{ 'ng-model' => 'arg.keys[$index]',
                               'ng-change' => 'remove_blanks_from_hash(arg)',
                               'style' => 'width: 45%'}
          %span
            \:
          %input.form-control{ 'ng-model' => 'arg.values[$index]',
                               'style' => 'width: 45%'}

      %script{type: 'text/ng-template', id: "list_str.html"}
        %div{"ng-init" => "arg.values = arg.keys || ['']"}
        %div{'ng-repeat' => 'val in arg.values track by $index'}
          %input.form-control{ 'ng-model' => 'arg.values[$index]',
                               'ng-change' => 'arg.values = remove_blanks(arg.values)'}

      %script{type: 'text/ng-template', id: "list_lookup.html"}
        %select.form-control{'multiple' => 'true',
          'ng-options' => "raw_column as raw_column for raw_column in raw_data_columns",
          'ng-model' => 'arg.values'}

      %script{type: "text/ng-template", id: "function.html"}
        .col-md-2{ style: "background-color: #eee; border-radius: 5px; padding-bottom: 20px; margin-bottom: 20px;" }
          %h5 Function
          %select.form-control{ 'ng-options' => "func as func.name for func in column.valid_functions",
                                'ng-model' => 'column.selected_func'}
          %p {{column.selected_func.description}}

        .col-md-10
          %h5 Arguments
          .row
            .col-md-4{'ng-repeat' => 'arg in column.selected_func.args', style: "border: 1px solid #eee; border-radius: 5px; padding-bottom: 20px; margin-bottom: 20px;" }
              %strong {{arg.name}}
              %p {{arg.description}}
              %div{'ng-include' => 'arg.template'}

      .container
        .row{'ng-repeat' => 'column in target_columns'}
          .col-md-1
            {{column.name}}
          .col-md-11
            .row
              .col-md-10
                %input.form-control{readonly: true, value: '{{json_from_hash(column.selected_func)}}', style: 'margin: 10px 0px' }
            .row
              .col-md-10
                %div{'ng-include' => '"function.html"'}
